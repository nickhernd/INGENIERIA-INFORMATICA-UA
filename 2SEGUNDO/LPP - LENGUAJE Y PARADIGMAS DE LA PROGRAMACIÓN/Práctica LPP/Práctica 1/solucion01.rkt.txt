#lang racket
(require rackunit)

;--------------;
; Ejercicio 1: ;
;--------------;

(define (binario-a-decimal b3 b2 b1 b0)
  (+ (* b3 (expt 2 3))
     (* b2 (expt 2 2))
     (* b1 2)
     b0))

(check-equal? (binario-a-decimal 1 1 1 1) 15)
(check-equal? (binario-a-decimal 0 1 1 0) 6)
(check-equal? (binario-a-decimal 0 0 1 0) 2)

(define (decimal-a-hexadecimal valor)
  (if (< valor 10)
      (integer->char (+ (char->integer #\0) valor))
      (integer->char (+ (char->integer #\A) (- valor 10)))))

(define (binario-a-hexadecimal b3 b2 b1 b0)
  (decimal-a-hexadecimal (binario-a-decimal b3 b2 b1 b0)))

(check-equal? (binario-a-hexadecimal 1 1 1 1) #\F)
(check-equal? (binario-a-hexadecimal 0 1 1 0) #\6)
(check-equal? (binario-a-hexadecimal 1 0 1 0) #\A)


;--------------;
; Ejercicio 2: ;
;--------------;

(define (menor-de-tres a b c)
  (if (< a b)
      (if (< a c) a c)
      (if (< b c) b c)))

(check-equal? (menor-de-tres 2 8 1) 1)
(check-equal? (menor-de-tres 8 2 1) 1)
(check-equal? (menor-de-tres 2 1 8) 1)
(check-equal? (menor-de-tres 8 1 2) 1)
(check-equal? (menor-de-tres 1 8 2) 1)
(check-equal? (menor-de-tres 1 2 8) 1)

(define (menor a b)
  (if (< a b) a b))

(define (menor-de-tres-v2 a b c)
  (menor (menor a b) c))

(check-equal? (menor-de-tres-v2 3 0 3) 0)
(check-equal? (menor-de-tres-v2 0 3 3) 0)
(check-equal? (menor-de-tres-v2 3 3 0) 0)
(check-equal? (menor-de-tres-v2 3 5 3) 3)
(check-equal? (menor-de-tres-v2 5 3 3) 3)
(check-equal? (menor-de-tres-v2 3 3 5) 3)

;--------------;
; Ejercicio 3: ;
;--------------;

;; Orden aplicativo 

; (f (g (+ 2 1)) (+ 1 1)) -> R3
; (f (g 3) (+ 1 1)) -> R4
; (f (cons 2 3) (+ 1 1)) -> R3
; (f (2 . 3) (+ 1 1)) -> R3
; (f (2 . 3) 2) -> R4
; (cons (2 . 3) 2) -> R3
; ((2 . 3) . 2)


;; Orden normal

; (f (g (+ 2 1)) (+ 1 1)) -> R4
; (cons (g (+ 2 1)) (+ 1 1)) -> R4
; (cons (cons 2 (+ 2 1)) (+ 1 1)) -> R3
; (cons (cons 2 3) (+ 1 1)) -> R3
; (cons (2 . 3) (+ 1 1)) -> R3
; (cons (2 . 3) 2) -> R3
; ((2 . 3) . 2)

;; Orden aplicativo 

; (g 0 (f 10)) -> R4 f
; (g 0 (/ 10 0)) -> R3
; #!error_2ºarg

;; Orden normal

; (g 0 (f 10)) -> R4 g
; (if (= 0 0) 0 (f 10)) -> R3
; (if #t 0 (f 10)) -> Evaluación If
; 0


;--------------;
; Ejercicio 4: ;
;--------------;

(define (distancia-a-7 t)
  (abs (- 7 (+ (car t) (cdr t)))))

(define (mejor-distancia d1 d2)
  (cond
    ((< d1 d2) 1)
    ((> d1 d2) 2)
    (else 0)))

(define (tirada-ganadora t1 t2)
  (mejor-distancia (distancia-a-7 t1)
                   (distancia-a-7 t2)))

(check-equal? (tirada-ganadora (cons 1 3) (cons 1 6)) 2)
(check-equal? (tirada-ganadora (cons 1 5) (cons 2 2)) 1)
(check-equal? (tirada-ganadora (cons 6 2) (cons 3 3)) 0)


;--------------;
; Ejercicio 5: ;
;--------------;

(define (obten-palo caracter)
  (cond
    ((equal? #\O caracter) 'Oros)
    ((equal? #\C caracter) 'Copas)
    ((equal? #\E caracter) 'Espadas)
    (else 'Bastos)))

(define (obten-valor caracter)
  (cond
    ((equal? #\A caracter) 1)  ; As
    ((equal? #\S caracter) 10) ; Sota
    ((equal? #\C caracter) 11) ; Caballo
    ((equal? #\R caracter) 12) ; Rey
    (else (- (char->integer caracter) (char->integer #\0)))))

(check-equal? (obten-palo #\O) 'Oros)
(check-equal? (obten-palo #\E) 'Espadas)
(check-equal? (obten-valor #\3) 3)
(check-equal? (obten-valor #\S) 10)

(define (par-caracteres-a-carta pareja)
  (cons (obten-valor (car pareja))
        (obten-palo (cdr pareja))))

(define (simbolo-a-par-caracteres simbolo)
  (cons (string-ref (symbol->string simbolo) 0)
        (string-ref (symbol->string simbolo) 1)))

(define (carta simbolo)
  (par-caracteres-a-carta
   (simbolo-a-par-caracteres simbolo)))

(check-equal? (carta 'AC) '(1 . Copas))
(check-equal? (carta '2O) '(2 . Oros))
(check-equal? (carta 'RB) '(12 . Bastos))

(define tres-de-oros '3O)
(define as-de-copas 'AC)
(define caballo-de-espadas 'CE)
(define rey-de-bastos 'RB)

(check-equal? (carta tres-de-oros) '(3 . Oros))
(check-equal? (carta as-de-copas) '(1 . Copas))
(check-equal? (carta caballo-de-espadas) '(11 . Espadas))
(check-equal? (carta rey-de-bastos) '(12 . Bastos))


;--------------;
; Ejercicio 6: ;
;--------------;

(define epsilon 0.0001)

(define (iguales-reales? x y)
    (< (abs (- x y)) epsilon))

(define (distancia coor1 coor2)
  (sqrt (+ (expt (- (car coor1) (car coor2)) 2)
           (expt (- (cdr coor1) (cdr coor2)) 2))))

(define (tipo-triangulo-por-distancias d1 d2 d3)
  (cond
    ((and (iguales-reales? d1 d2)
          (iguales-reales? d1 d3)) "equilatero")
    ((or (iguales-reales? d1 d2)
         (iguales-reales? d2 d3)
         (iguales-reales? d3 d1)) "isósceles")
    (else "escaleno")))
  
(define (tipo-triangulo coor1 coor2 coor3)
  (tipo-triangulo-por-distancias (distancia coor1 coor2)
                                 (distancia coor2 coor3)
                                 (distancia coor3 coor1)))

(check-equal? (tipo-triangulo (cons 1 1) (cons  1 6) (cons 6 1)) "isósceles")
(check-equal? (tipo-triangulo (cons -2 3) (cons  2 6) (cons 5 3)) "escaleno")
(check-equal? (tipo-triangulo (cons -3 0) (cons  3 0) (cons 0 5.1961)) "equilatero")